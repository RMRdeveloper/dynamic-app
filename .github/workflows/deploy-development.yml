name: Linting and Tests with database as service

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    environment: Development

    strategy:
      matrix:
        node-version: [12, 16, 18, 22]
    
    services:
      mysql:
        image: mysql:9.0.1
        env:
          DB_USER: ${{ secrets.DB_USER }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DATABASE_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -P 3306 -u $DB_USER --password=$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.2'
      - uses: actions/checkout@v4
  
      - name: Copy example environment file
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
        
      - name: Install laravel dependencies
        run: composer update && composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        
      - name: Generate key
        run: php artisan key:generate
        
      - name: Directory permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install node dependencies
        run: npm install

      - name: Build react app
        run: npm run build
        
      - name: Execute migrations
        run: php artisan migrate
        
      - name: Clear cache, views, configurations and routes
        run: php artisan config:clear && php artisan cache:clear && php artisan view:clear && php artisan route:cache

      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        run: php artisan test
        # Config databse connection for tests
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: ${{ secrets.DATABASE_NAME }}
          DB_USERNAME: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
